angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(n,o){t.currentUser=o})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,n){t.login=function(o,e){n.login(o,e).then(function(n){t.$emit("login",n.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,n){t.addPost=function(){t.postBody&&n.create({username:"dickeyxxx",body:t.postBody}).success(function(n){t.postBody=null})},n.fetch().success(function(n){t.posts=n}),t.$on("ws:new_post",function(n,o){t.$apply(function(){t.posts.unshift(o)})})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(n){return t.post("/api/posts",n)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,n){t.register=function(o,e){n.register(o,e).then(function(n){t.$emit("login",n)})}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var n=this;n.getUser=function(){return t.get("/api/users")},n.login=function(o,e){return t.post("/api/sessions",{username:o,password:e}).then(function(o){return n.token=o.data,t.defaults.headers.common["X-Auth"]=o.data,n.getUser()})},n.register=function(o,e){return t.post("/api/users",{username:o,password:e}).then(function(){return n.login(o,e)})}}]),angular.module("app").run(["$rootScope",function(t){var n="ws://localhost:3000",o=new WebSocket(n);o.onopen=function(){console.log("WebSocket connected")},o.onmessage=function(n){console.log(n);var o=JSON.parse(n.data);t.$broadcast("ws:"+o.topic,o.data)}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyIsIndlYnNvY2tldHMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkb24iLCJfIiwidXNlciIsImN1cnJlbnRVc2VyIiwiVXNlclN2YyIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRoZW4iLCJyZXNwb25zZSIsIiRlbWl0IiwiZGF0YSIsIlBvc3RzU3ZjIiwiYWRkUG9zdCIsInBvc3RCb2R5IiwiY3JlYXRlIiwiYm9keSIsInN1Y2Nlc3MiLCJwb3N0IiwiZmV0Y2giLCJwb3N0cyIsIiRhcHBseSIsInVuc2hpZnQiLCJzZXJ2aWNlIiwiJGh0dHAiLCJ0aGlzIiwiZ2V0IiwicmVnaXN0ZXIiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsInN2YyIsImdldFVzZXIiLCJ2YWwiLCJ0b2tlbiIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsInJ1biIsIiRyb290U2NvcGUiLCJ1cmwiLCJjb25uZWN0aW9uIiwiV2ViU29ja2V0Iiwib25vcGVuIiwiY29uc29sZSIsImxvZyIsIm9ubWVzc2FnZSIsImUiLCJwYXlsb2FkIiwiSlNPTiIsInBhcnNlIiwiJGJyb2FkY2FzdCIsInRvcGljIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxPQUNBLFlDREFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLElBQUEsUUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBSSxZQUFBRCxPQ0hBTixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUssR0FDQUwsRUFBQU0sTUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBQyxNQUFBQyxFQUFBQyxHQUNBQyxLQUFBLFNBQUFDLEdBQ0FWLEVBQUFXLE1BQUEsUUFBQUQsRUFBQUUsWUNMQWYsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxXQUFBLFNBQUFDLEVBQUFhLEdBQ0FiLEVBQUFjLFFBQUEsV0FDQWQsRUFBQWUsVUFDQUYsRUFBQUcsUUFDQVQsU0FBQSxZQUNBVSxLQUFBakIsRUFBQWUsV0FDQUcsUUFBQSxTQUFBQyxHQUVBbkIsRUFBQWUsU0FBQSxRQU9BRixFQUFBTyxRQUFBRixRQUFBLFNBQUFHLEdBQ0FyQixFQUFBcUIsTUFBQUEsSUFHQXJCLEVBQUFDLElBQUEsY0FBQSxTQUFBQyxFQUFBaUIsR0FDQW5CLEVBQUFzQixPQUFBLFdBQ0F0QixFQUFBcUIsTUFBQUUsUUFBQUosVUN0QkF0QixRQUFBQyxPQUFBLE9BQ0EwQixRQUFBLFlBQUEsUUFBQSxTQUFBQyxHQUNBQyxLQUFBTixNQUFBLFdBQ0EsTUFBQUssR0FBQUUsSUFBQSxlQUVBRCxLQUFBVixPQUFBLFNBQUFHLEdBQ0EsTUFBQU0sR0FBQU4sS0FBQSxhQUFBQSxPQ05BdEIsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGdCQUFBLFNBQUEsVUFBQSxTQUFBQyxFQUFBSyxHQUNBTCxFQUFBNEIsU0FBQSxTQUFBckIsRUFBQUMsR0FDQUgsRUFBQXVCLFNBQUFyQixFQUFBQyxHQUNBQyxLQUFBLFNBQUFOLEdBQ0FILEVBQUFXLE1BQUEsUUFBQVIsU0NMQU4sUUFBQUMsT0FBQSxPQUNBK0IsUUFBQSxpQkFBQSxTQUFBQyxHQUNBQSxFQUNBQyxLQUFBLEtBQUFoQyxXQUFBLFlBQUFpQyxZQUFBLGVBQ0FELEtBQUEsYUFBQWhDLFdBQUEsZUFBQWlDLFlBQUEsa0JBQ0FELEtBQUEsVUFBQWhDLFdBQUEsWUFBQWlDLFlBQUEsa0JDTEFuQyxRQUFBQyxPQUFBLE9BQ0EwQixRQUFBLFdBQUEsUUFBQSxTQUFBQyxHQUNBLEdBQUFRLEdBQUFQLElBQ0FPLEdBQUFDLFFBQUEsV0FDQSxNQUFBVCxHQUFBRSxJQUFBLGVBZ0JBTSxFQUFBM0IsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE1BQUFpQixHQUFBTixLQUFBLGlCQUNBWixTQUFBQSxFQUFBQyxTQUFBQSxJQUNBQyxLQUFBLFNBQUEwQixHQUdBLE1BRkFGLEdBQUFHLE1BQUFELEVBQUF2QixLQUNBYSxFQUFBWSxTQUFBQyxRQUFBQyxPQUFBLFVBQUFKLEVBQUF2QixLQUNBcUIsRUFBQUMsYUFLQUQsRUFBQUwsU0FBQSxTQUFBckIsRUFBQUMsR0FDQSxNQUFBaUIsR0FBQU4sS0FBQSxjQUNBWixTQUFBQSxFQUFBQyxTQUFBQSxJQUNBQyxLQUFBLFdBQ0EsTUFBQXdCLEdBQUEzQixNQUFBQyxFQUFBQyxTQ25DQVgsUUFBQUMsT0FBQSxPQUNBMEMsS0FBQSxhQUFBLFNBQUFDLEdBQ0EsR0FBQUMsR0FBQSxzQkFDQUMsRUFBQSxHQUFBQyxXQUFBRixFQUVBQyxHQUFBRSxPQUFBLFdBQ0FDLFFBQUFDLElBQUEsd0JBR0FKLEVBQUFLLFVBQUEsU0FBQUMsR0FDQUgsUUFBQUMsSUFBQUUsRUFDQSxJQUFBQyxHQUFBQyxLQUFBQyxNQUFBSCxFQUFBckMsS0FDQTZCLEdBQUFZLFdBQUEsTUFBQUgsRUFBQUksTUFBQUosRUFBQXRDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG5cdCduZ1JvdXRlJ1xuXSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG4gICRzY29wZS4kb24oJ2xvZ2luJywgZnVuY3Rpb24gKF8sIHVzZXIpIHtcbiAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyXG4gIH0pXG59KSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFVzZXJTdmMpIHtcbiAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgIFVzZXJTdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHJlc3BvbnNlLmRhdGEpXG4gICAgfSlcbiAgfVxufSlcblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgUG9zdHNTdmMpIHtcbiAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCRzY29wZS5wb3N0Qm9keSkge1xuICAgICAgUG9zdHNTdmMuY3JlYXRlKHtcbiAgICAgICAgdXNlcm5hbWU6ICdkaWNrZXl4eHgnLFxuICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHlcbiAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgLy8kc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KVxuICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuICBcblxuXG4gIFBvc3RzU3ZjLmZldGNoKCkuc3VjY2VzcyhmdW5jdGlvbiAocG9zdHMpIHtcbiAgICAkc2NvcGUucG9zdHMgPSBwb3N0c1xuICB9KVxuICBcbiAgICRzY29wZS4kb24oJ3dzOm5ld19wb3N0JywgZnVuY3Rpb24gKF8sIHBvc3QpIHtcbiAgXHQkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcbiAgICBcdCRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpXG4gIFx0fSlcbiAgfSlcbiAgXG59KVxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuICB0aGlzLmZldGNoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKVxuICB9XG4gIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24gKHBvc3QpIHtcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpXG4gIH1cbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XG4gICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICBVc2VyU3ZjLnJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgJHNjb3BlLiRlbWl0KCdsb2dpbicsIHVzZXIpXG4gICAgfSlcbiAgfVxufSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICRyb3V0ZVByb3ZpZGVyXG4gIC53aGVuKCcvJywgeyBjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgdGVtcGxhdGVVcmw6ICdwb3N0cy5odG1sJyB9KVxuICAud2hlbignL3JlZ2lzdGVyJywgeyBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJywgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJyB9KVxuICAud2hlbignL2xvZ2luJywgeyBjb250cm9sbGVyOiAnTG9naW5DdHJsJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJyB9KSAgLy9BRERFRCBUSElTIEJJVFxufSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24gKCRodHRwKSB7XG4gIHZhciBzdmMgPSB0aGlzXG4gIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKVxuICAgfVxuXG4vL2FuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLy8uc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuLy8gIHZhciBzdmMgPSB0aGlzXG4vLyAgc3ZjLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4vLyAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnLCB7XG4vLyAgICAgIGhlYWRlcnM6IHsgJ1gtQXV0aCc6IHRoaXMudG9rZW4gfVxuLy8gICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbi8vICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGFcbi8vICAgIH0pXG4vLyAgfVxuIFxuICBcbiAgLy9Mb2dpbiBmdW5jdGlvblxuICBzdmMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLCB7XG4gICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbCkge1xuICAgICAgc3ZjLnRva2VuID0gdmFsLmRhdGFcbiAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHZhbC5kYXRhXG4gICAgICByZXR1cm4gc3ZjLmdldFVzZXIoKVxuICAgIH0pXG4gIH1cbiAgXG4gIC8vQURERUQgVEhJUyBGVU5DVElPTiBUTyBUSEUgVVNFUiBTRVJWSUNFXG4gIHN2Yy5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICBcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcbiAgICB9KS50aGVuKGZ1bmN0aW9uKCl7XG4gICAgXHRyZXR1cm4gc3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICB9KVxuICB9XG4gIFxufSlcblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4ucnVuKGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XG4gIHZhciB1cmwgPSAnd3M6Ly9sb2NhbGhvc3Q6MzAwMCdcbiAgdmFyIGNvbm5lY3Rpb24gPSBuZXcgV2ViU29ja2V0KHVybClcblxuICBjb25uZWN0aW9uLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zb2xlLmxvZygnV2ViU29ja2V0IGNvbm5lY3RlZCcpXG4gIH1cbiAgXG4gIGNvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgY29uc29sZS5sb2coZSlcbiAgdmFyIHBheWxvYWQgPSBKU09OLnBhcnNlKGUuZGF0YSlcbiAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd3czonICsgcGF5bG9hZC50b3BpYywgcGF5bG9hZC5kYXRhKVxufVxuXG5cbn0pXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==